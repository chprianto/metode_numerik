for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(a[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = m))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- a[j, piv]/a[row_curr, piv]
m <- replace_row(a, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
if(b!=NULL){
t <- solve(L, b)
result <- solve(a, t)
return(list(P = P, L = L, U = a, result=result))
}else{
return(list(P = P, L = L, U = a))
}
}
lu_solve <- function(a, b=NULL){
count_rows <- nrow(a)
count_cols <- ncol(a)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(a[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = m))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- a[j, piv]/a[row_curr, piv]
m <- replace_row(a, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
if(b==NULL){
return(list(P = P, L = L, U = a))
}else{
t <- solve(L, b)
result <- solve(a, t)
return(list(P = P, L = L, U = a, result=result))
}
}
# membuat matriks a dan vektor b
a <- matrix(c(1,2,3,-1,1,1,-1,2,
0,-1,-1,3,3,1,2,-1),
nrow=4)
b <- c(4,1,-3,4)
# penyelesaian
lu_solve(a)
lu_solve <- function(a, b=NA){
count_rows <- nrow(a)
count_cols <- ncol(a)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(a[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = m))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- a[j, piv]/a[row_curr, piv]
m <- replace_row(a, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
if(b==NA){
return(list(P = P, L = L, U = a))
}else{
t <- solve(L, b)
result <- solve(a, t)
return(list(P = P, L = L, U = a, result=result))
}
}
# membuat matriks a dan vektor b
a <- matrix(c(1,2,3,-1,1,1,-1,2,
0,-1,-1,3,3,1,2,-1),
nrow=4)
b <- c(4,1,-3,4)
# penyelesaian
lu_solve(a)
lu_solve <- function(a, b=NA){
count_rows <- nrow(a)
count_cols <- ncol(a)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(a[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = m))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- a[j, piv]/a[row_curr, piv]
m <- replace_row(a, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
if(is.null(b)){
return(list(P = P, L = L, U = a))
}else{
t <- solve(L, b)
result <- solve(a, t)
return(list(P = P, L = L, U = a, result=result))
}
}
# membuat matriks a dan vektor b
a <- matrix(c(1,2,3,-1,1,1,-1,2,
0,-1,-1,3,3,1,2,-1),
nrow=4)
b <- c(4,1,-3,4)
# penyelesaian
lu_solve(a)
lu_solve <- function(a){
count_rows <- nrow(a)
count_cols <- ncol(a)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(a[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = m))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- a[j, piv]/a[row_curr, piv]
m <- replace_row(a, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
return(list(P = P, L = L, U = a))
}
# penyelesaian
lu_solve(a)
solve(lu_solve(a)$L, b)
# penyelesaian
lu_solve(a)
lu_solve <- function(a){
count_rows <- nrow(a)
count_cols <- ncol(a)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(a[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = m))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- a[j, piv]/a[row_curr, piv]
m <- replace_row(a, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
return(list(P = P, L = L, U = a))
}
lu_solve <- function(a){
count_rows <- nrow(a)
count_cols <- ncol(a)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(a[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = a))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- a[j, piv]/a[row_curr, piv]
m <- replace_row(a, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
return(list(P = P, L = L, U = a))
}
# penyelesaian
lu_solve(a)
lu_solve <- function(m){
count_rows <- nrow(m)
count_cols <- ncol(m)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(m[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = m))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- m[j, piv]/m[row_curr, piv]
m <- replace_row(m, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
return(list(P = P, L = L, U = m))
}
lu_solve <- function(m){
count_rows <- nrow(m)
count_cols <- ncol(m)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(m[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = m))
}
}
if(i != row_curr){
m <- swap_row(m, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- m[j, piv]/m[row_curr, piv]
m <- replace_row(m, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
return(list(P = P, L = L, U = m))
}
# penyelesaian
lu_solve(a)
solve(lu_solve(a)$L, b)
lu_solve <- function(a, b=NA){
count_rows <- nrow(a)
count_cols <- ncol(a)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(a[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = a))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- a[j, piv]/a[row_curr, piv]
a <- replace_row(a, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
if(is.null(b)){
return(list(P = P, L = L, U = a))
}else{
t <- solve(L, b)
x <- solve(a, t)
return(list(P = P, L = L, U = a, result=x))
}
}
# membuat matriks a dan vektor b
a <- matrix(c(1,2,3,-1,1,1,-1,2,
0,-1,-1,3,3,1,2,-1),
nrow=4)
b <- c(4,1,-3,4)
# penyelesaian
lu_solve(a)
b <- c(4,1,-3,4)
solve(lu_solve(a)$L, b)
lu_solve <- function(a, b=NULL){
count_rows <- nrow(a)
count_cols <- ncol(a)
piv <- 1
P <- L <- diag(count_cols)
for(row_curr in 1:count_rows){
if(piv <= count_cols){
i <- row_curr
while(a[i, piv] == 0 && i < count_rows){
i <- i + 1
if(i > count_rows){
i <- row_curr
piv <- piv + 1
if(piv > count_cols)
return(list(P = P, L = L, U = a))
}
}
if(i != row_curr){
a <- swap_row(a, i, row_curr)
P <- swap_row(P, i, row_curr)
}
for(j in row_curr:count_rows)
if(j != row_curr){
k <- a[j, piv]/a[row_curr, piv]
a <- replace_row(a, row_curr, j, -k)
L[j, piv] <- k
}
piv <- piv + 1
}
}
if(is.null(b)){
return(list(P = P, L = L, U = a))
}else{
t <- solve(L, b)
x <- solve(a, t)
return(list(P = P, L = L, U = a, result=x))
}
}
# penyelesaian
lu_solve(a)
# penyelesaian
lu_solve(a,b)
# penyelesaian
d<-lu_solve(a,b)
# penyelesaian
decomp<-lu_solve(a,b)
decomp$L%*%decomp$U%*%decomp$P
# membentuk matriks a
(A <- matrix(c(0, 1, 7, 1, 5, -1, -2, 9, -5), 3))
# dekomposisi lu
lu_solve(A)
# dekomposisi lu
decomp<-lu_solve(A)
decomp$P %*% decomp$L %*% decomp$U
install.packages("Matrix")
library(Matrix)
library(Matrix)
lu(A)
lum <- lu(A)
lum
expand(lum)
# membentuk matriks a
(A <- matrix(c(0, 1, 7, 1, 5, -1, -2, 9, -5), 3))
# dekomposisi lu
decomp<-lu_solve(A)
lum <- lu(A)
lum
expand(lum)
?lu
lum <- lu(A, warnSing = TRUE)
lum
expand(lum)
lum <- lu(a, warnSing = TRUE)
lum
expand(lum)
lum <- u(a, errSing = TRUE, order = TRUE, tol = 1,
keep.dimnames = TRUE)
lum <- lu(a, errSing = TRUE, order = TRUE, tol = 1,
keep.dimnames = TRUE)
lum
expand(lum)
lum <- lu(a, errSing = TRUE)
expand(lum)
showMethods("lu")
lu(a, method="dsparseMatrix")
lu(a, errSing = TRUE)
lu(a, errSing = TRUE, warnSing=TRUE)
e<-lu(a, errSing = TRUE, warnSing=TRUE)
expand(e)
A <- Matrix(c(0, 1, 7, 1, 5, -1, -2, 9, -5), 3)
A
lum <- lu(A, errSing = TRUE)
lum
expand(lum)
# membuat matriks a dan vektor b
a <- matrix(c(1,2,3,-1,1,1,-1,2,
0,-1,-1,3,3,1,2,-1),
nrow=4)
b <- c(4,1,-3,4)
lum <- lu(a)
lum
decomp <- expand(lum)
decomp
# forward
(t<-solve(decomp$L,b))
# backward
solve(decomp$U, t)
# membuat matriks a dan vektor b
a <- Matrix(c(1,2,3,-1,1,1,-1,2,
0,-1,-1,3,3,1,2,-1),
nrow=4)
b <- c(4,1,-3,4)
lum <- lu(a)
lum
decomp <- expand(lum)
decomp
# forward
(t<-solve(decomp$L,b))
# backward
solve(decomp$U, t)
# membuat matriks a
a <- Matrix(round(rnorm(9),2), nrow=3)
# dekomposisi
lum <- lu(a)
lum
decomp <- expand(lum)
decomp
