}
}else if(n==4){
c <- c(0.347854845,0.652145155,0.652145155,
0.347854845)
x <- c(-0.861136312,-0.339981044,0.339981044,
0.861136312)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==5){
c <- c(0.236926885,0.478628670,0.568888889,
0.478628670,0.236926885)
x <- c(-0.906179846,-0.538469310,0,
0.538469310, 0.906179846)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==6){
c <- c(0.171324492,0.360761573,0.467913935,
0.467913935,0.360761573,0.171324492)
x <- c(-0.932469514,-0.661209386,-0.238619186,
0.238619186, 0.661209386,0.932469514)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else{
stop("n harus ditentukan")
}
return(integral)
}
gauss_legendre <- function(f, n){
if(n==2){
c <- c(1,1)
x <- c(-0.577350269, 0.577350269)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==3){
c <- c(0.555555556,0.888888889,0.555555556)
x <- c(-0.774596669,0,0.774596669)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==4){
c <- c(0.347854845,0.652145155,0.652145155,
0.347854845)
x <- c(-0.861136312,-0.339981044,0.339981044,
0.861136312)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==5){
c <- c(0.236926885,0.478628670,0.568888889,
0.478628670,0.236926885)
x <- c(-0.906179846,-0.538469310,0,
0.538469310, 0.906179846)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==6){
c <- c(0.171324492,0.360761573,0.467913935,
0.467913935,0.360761573,0.171324492)
x <- c(-0.932469514,-0.661209386,-0.238619186,
0.238619186, 0.661209386,0.932469514)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else{
stop("n harus ditentukan")
}
return(integral)
}
gauss_legendre(function(x)((1.5+0.52*x)^2)+1,
n=2)
0.5*gauss_legendre(function(x)((1.5+0.5*x)^2)+1,
n=2)
install.packages("gaussquad")
gaussquad::legendre.quadrature
?gaussquad::legendre.quadrature
?gaussquad::legendre.quadrature.rules
library(gaussquad)
# menampilkan aturan untuk orde 4
library(gaussquad)
# menampilkan aturan untuk orde 4
legendre.quadrature.rules(4)
# mencari integral suatu fungsi dengan orde
# gauss-legendre sebesar 4
f <- function(x)x^6
rule <- legendre.quadrature.rules(4)[[4]]
legendre.quadrature(f, rule, lower=-1, upper=1)
f <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)^x))
a <- 0; b <- 10
findiff <- function(f, x, h, method=NULL){
if(is.null(method)){
warning("please select a method")
}else{
if(method == "forward"){
return((f(x+h)-f(x))/h)
}else if(method=="backward"){
return((f(x)-f(x-h))/h)
}else if(method=="central"){
return((f(x+h)-f(x-h))/(2*h))
}else{
warning("you can use method: forward, bacward, or central")
}
}
}
findiff(function(x)
exp(-x)*sin(2*x)+1, x=1, h=0.05,
method="central")
findiff(function(x){  exp(-x)*sin(2*x)+1}, x=1,
h=1*.Machine$double.eps^(1/3),
method="central")
findiff2 <- function(f, x, h){
return((f(x+h)-2*f(x)+f(x-h))/(h^2))
}
findiff2(function(x){
exp(-x)*sin(2*x)+1
}, x=1, h=0.05)
f <- function(x){exp(-x)*sin(2*x)+1}
x <- 1
h <- x*.Machine$double.eps^(1/3)
xvec <- seq(x-h, x+h, h)
# turunan pertama
diff(f(xvec), lag=2)/(2*h)
numDeriv::grad(function(x){exp(-x)*sin(2*x)+1},
x=1, method = "simple",
method.args = list(eps=1*sqrt(.Machine$double.eps)))
library(pracma)
# turunan 1
fderiv(function(x){exp(-x)*sin(2*x)+1},
x = 1, n = 1, h = 1*.Machine$double.eps^(1/3),
method = "central")
# turunan 2
fderiv(function(x){exp(-x)*sin(2*x)+1},
x = 1, n = 2, h = 1*.Machine$double.eps^(1/3),
method = "central")
numderiv(function(x){exp(-x)*sin(2*x)+1},
x0 = 1, h = 1*.Machine$double.eps^(1/3))
numdiff(function(x){exp(-x)*sin(2*x)+1},
x = 1:4, h = 1*.Machine$double.eps^(1/3))
grad(function(x){exp(-x)*sin(2*x)+1}, x0 = 1)
library(knitr)
img1_path <- "./images/midpt.png"
include_graphics(img1_path)
riemann <- function(f, a, b, m = 100){
n_width <- (b-a)/m
x <- seq(a, b-n_width, length.out = m) + n_width/2
y <- f(x)
return(sum(y)*abs(b-a)/m)
}
# m=2
riemann(function(x) x^2, a=0, b=1, m=2)
# m=4
riemann(function(x) x^2, a=0, b=1, m=4)
# m=100
riemann(function(x) x^2, a=0, b=1)
m <- seq(2, 100)
nilai_integrasi <- rep(0, length(m))
for(i in 1:length(nilai_integrasi)){
nilai_integrasi[i]=riemann(function(x) x^2, a=0, b=1,
m=m[i])
}
plot(m, nilai_integrasi, type = "l")
library(knitr)
img1_path <- "./images/trapviz.png"
include_graphics(img1_path)
library(knitr)
img1_path <- "./images/trapviz2.png"
include_graphics(img1_path)
trap <- function(f, a, b, m=100){
x <- seq(a, b, length.out = m+1)
y <- f(x)
p_area <- sum((y[2:(m+1)] + y[1:m]))
p_area <- p_area * abs(b-a)/(2*m)
return(p_area)
}
trap(function(x)x^2, a=0, b=1, m=2)
m <- seq(2, 100)
nilai_integrasi <- rep(0, length(m))
for(i in 1:length(nilai_integrasi)){
nilai_integrasi[i]=trap(function(x) x^2, a=0, b=1,
m=m[i])
}
tail(nilai_integrasi,1)
plot(m, nilai_integrasi, type = "l",
ylim = c(0.32,0.38))
simpson <- function(f, a, b, m=100){
h <- (b-a)/m # jarak selang
x <- a # awal selang
I <- f(a)+f(b)
sigma <- 0
if(m%%2 != 0){
stop("Jumlah panel harus genap")
}else{
for(i in 1:(m-1)){
x <- x+h
if(i%%2==0){
sigma <- sigma + 2*f(x)
}else{
sigma <- sigma + 4*f(x)
}
}
}
return((h/3)*(I+sigma))
}
simpson(function(x)1/(1+x), a=0, b=1, m=8)
simpson38 <- function(f, a, b, m=90){
h <- (b-a)/m # jarak selang
x <- a # awal selang
I <- f(a)+f(b)
sigma <- 0
if(m%%3 != 0){
stop("jumlah panel harus kelipatan 3")
}else{
for(i in 1:(m-1)){
x <- x+h
if(i%%3==0){
sigma <- sigma + 2*f(x)
}else{
sigma <- sigma + 3*f(x)
}
}
}
return((3*h/8)*(I+sigma))
}
simpson38(function(x)1/(1+x), a=0, b=1, m=9)
library(pracma)
f <- function(x)x^2
x <- seq(0, 1, length.out = 101) # membuat subinterval panel sebanyak 100
y <- f(x)
trapz(x, y)
f <- function(x)1/(1+x)
a <- 0; b <- 1
# metode trapezoida
cotes(f, a, b, n=8, nodes=2)
# metode Simpson 1/3
cotes(f, a, b, n=8, nodes=3)
# metode Simpson 3/8
cotes(f, a, b, n=9, nodes=4)
library(knitr)
img1_path <- "./images/gaussviz.png"
include_graphics(img1_path)
gauss_legendre <- function(f, n){
if(n==2){
c <- c(1,1)
x <- c(-0.577350269, 0.577350269)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==3){
c <- c(0.555555556,0.888888889,0.555555556)
x <- c(-0.774596669,0,0.774596669)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==4){
c <- c(0.347854845,0.652145155,0.652145155,
0.347854845)
x <- c(-0.861136312,-0.339981044,0.339981044,
0.861136312)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==5){
c <- c(0.236926885,0.478628670,0.568888889,
0.478628670,0.236926885)
x <- c(-0.906179846,-0.538469310,0,
0.538469310, 0.906179846)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else if(n==6){
c <- c(0.171324492,0.360761573,0.467913935,
0.467913935,0.360761573,0.171324492)
x <- c(-0.932469514,-0.661209386,-0.238619186,
0.238619186, 0.661209386,0.932469514)
integral <- 0
for(i in 1:n){
integral <- integral + c[i]*f(x[i])
}
}else{
stop("n harus ditentukan")
}
return(integral)
}
0.5*gauss_legendre(function(x)((1.5+0.5*x)^2)+1,
n=2)
library(gaussquad)
# menampilkan aturan untuk orde 4
legendre.quadrature.rules(4)
# mencari integral suatu fungsi dengan orde
# gauss-legendre sebesar 4
f <- function(x)x^6
rule <- legendre.quadrature.rules(4)[[4]]
legendre.quadrature(f, rule, lower=-1, upper=1)
riemann_adaptint <- function(f, a, b, m=10, tol=1e-8){
if(m<1){
stop("m harus >= 1")
}else if(m==1){
m <- 2
n_width <- (b-a)/m
x <- seq(a, b-n_width, length.out = m) + n_width/2
y <- f(x)
area <- sum(y)*abs(b-a)/m
}else{
m1 <- 1
n_width1 <- (b-a)/m1
x1 <- seq(a, b-n_width1, length.out = m1) + n_width1/2
y1 <- f(x1)
q1 <- sum(y1)*abs(b-a)/m1
m2 <- 2
n_width2 <- (b-a)/m2
x2 <- seq(a, b-n_width2, length.out = m2) + n_width2/2
y2 <- f(x2)
q2 <- sum(y2)*abs(b-a)/m2
if(abs(q1-q2)>3*tol){
m <- m-1
tol <- tol/2
c <- (a+b)/2
lt <- riemann_adaptint(f, a, c, m=m, tol=tol)
rt <- riemann_adaptint(f, c, b, m=m, tol=tol)
area <- lt+rt
}else{
area <- q2
}
}
return(area)
}
riemann_adaptint(function(x)sin(x)^2 + log(x),
a=1, b=10, m=100)
integrate(function(x)sin(x)^2 + log(x),
lower=1, upper=10,
rel.tol = 1e-8)
pracma::integral(function(x)sin(x)^2 + log(x),
xmin=1, xmax=10, method="Simpson",
reltol = 1e-8)
romberg <- function(f, a, b, m, tab=FALSE){
R <- matrix(NA, nrow=m, ncol=m)
R[1,1] <- trap(f, a, b, m=1)
for(j in 2:m){
R[j,1] <- trap(f, a, b, m=2^(j-1))
for(k in 2:j){
k4 <- 4^(k-1)
R[j,k] <- (k4*R[j,k-1]-R[j-1,k-1])/(k4-1)
}
}
if(tab==TRUE){
return(R)
}else{
return(R[m,m])
}
}
# menampilkan matriks proses perhitungan
romberg(function(x)sin(x)^2 + log(x),
a=1, b=10, m=10, tab=TRUE)
pracma::romberg(function(x)sin(x)^2 + log(x),
a=1, b=10)
library(knitr)
img1_path <- "./images/monte.png"
include_graphics(img1_path)
monte_int <- function(f, a, b, m=1e6){
x <- runif(m, min=a, max=b)
return((b-a)*sum(f(x))/m)
}
monte_int(function(x)sin(x)^2 + log(x), a=1, b=10)
monte_int2 <- function(f, xdom, ydom, m=1000){
xmin <- min(xdom)
xmax <- max(xdom)
ymin <- min(ydom)
ymax <- max(ydom)
x <- runif(m, min=xmin, max=xmax)
y <- runif(m, min=ymin, max=ymax)
V <- (xmax-xmin)*(ymax-ymin)
return(V*sum(f(x,y))/m)
}
monte_int2(function(x,y)x^2*y,
xdom=c(0,1), ydom=c(0,1))
# Metode Riemann
riemann(f, a, b)
# Metode Trapezoida
trap(f, a, b)
# Metode Simpson 1/3
simpson(f, a, b)
# Metode Simpson 3/8
simpson38(f, a, b)
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)(5+5*x)))
5*gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-5*(12.5/68.1)(5+5*x)))
gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-5*(12.5/68.1)(5+5*x)))
gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-5*(12.5/68.1)(5+5*x)))
gauss_legendre(f, n=3) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-5*(12.5/68.1)(5+5*x)))
gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)(5+5*x)))
exp(5)*gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)(5+5*x)))
exp(-5)*gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)(5+5*x)))
5*gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)(5+5*x)))
5*gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)(5+5*x)))
5*gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)*x))
a <- 0; b <- 10
# Metode Riemann
riemann(f, a, b)
# Metode Trapezoida
trap(f, a, b)
# Metode Simpson 1/3
simpson(f, a, b)
# Metode Simpson 3/8
simpson38(f, a, b)
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)(5+5*x)))
exp(5)*gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)(5+5*x)))
gauss_legendre(f, n=4) # orde integrasi Gauss n=4
f2 <- function(x)((9.8*68.1)/12.5)*(1-exp(-(12.5/68.1)(5+5*x)))
5*gauss_legendre(f, n=4) # orde integrasi Gauss n=4
riemann_adaptint(f, a, b)
riemann_adaptint(f, a, b, m=100)
romberg(f, a, b, m=10)
monte_int(f, a, b)
bookdown::publish_book()
?read.csv
data()
?data
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
data(package="datasets")
str(mtcars)
str(iris)
data()
str(npk)
string <- c("a", "b", "c")
str(string)
?summary
summary(iris)
# cek 10 observasi teratas
head(iris, 10)
# cek 10 observasi terbawah
tail(iris, 10)
# cek struktur data
str(iris)
# ringkasan data
summary(iris)
?mode
?IQR
?quantile
names(airquality)
attach(airquality)
# rata-rata konsentrasi ozon
mean(Ozone, na.rm = TRUE)
# median konsentrasi ozon
median(Ozone, na.rm = TRUE)
# simpangan baku konsentrasi ozon
sd(Ozone, na.rm = TRUE)
# varians konsentrasi ozon
var(Ozone, na.rm = TRUE)
# range konsentrasi ozon
range(Ozone, na.rm = TRUE)
# IQR konsentrasi ozon
IQR(Ozone, na.rm = TRUE)
# kuartil 1, 2 dan 3 konsentrasi ozon
quantile(Ozone, probs = c(0.25, 0.5, 0.75))
attach(airquality)
# rata-rata konsentrasi ozon
mean(Ozone, na.rm = TRUE)
# median konsentrasi ozon
median(Ozone, na.rm = TRUE)
# simpangan baku konsentrasi ozon
sd(Ozone, na.rm = TRUE)
# varians konsentrasi ozon
var(Ozone, na.rm = TRUE)
# range konsentrasi ozon
range(Ozone, na.rm = TRUE)
# IQR konsentrasi ozon
IQR(Ozone, na.rm = TRUE)
# kuartil 1, 2 dan 3 konsentrasi ozon
quantile(Ozone, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
detach(airquality)
bookdown::publish_book()
bookdown::publish_book()
?glm
str(edtaR::contamination)
library(edtaR)
library(edtaR)
str(utds)
# ubah variabe Bicarbonat menjadi factor
utds$Bicarbonate <- factor(utds$Bicarbonate,
levels = c(0,1),
labels = c(" <= 50%",
" > 50%"))
str(utds)
log.model <- glm(CR ~ ., family=binomial, data=contamination)
anova(log.model)
summary(log.model)
bookdown::publish_book()
